package com.first.daka;

// 给定两个数组，编写一个函数来计算它们的交集。
// 示例 1:
// 输入: nums1 = [1,2,2,1], nums2 = [2,2]
// 输出: [2,2]  --- 1. 要有重复
// 示例 2:
// 输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
// 输出: [4,9]
// 说明：
// 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
// 我们可以不考虑输出结果的顺序。

// 思路：
// 1. 个数与两个数组中出现的次数一致，也就是取最小值。2. 不考虑顺序。
// 两个hashmap：key=值 value=次数  key相等的情况下，取value最小值
//
// 进阶:
// 如果给定的数组已经排好序呢？你将如何优化你的算法？
// 直接用数组存，这样时间复杂度会变小，下标=key值，直接进行比较value值。

// 如果 nums1 的大小比 nums2 小很多，哪种方法更优？
// 排好序的始终应该是最优的

// 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？
// 先排序，按照数字的长度分到不同的桶里，然后每个桶再取值。结果再合并。
public class intersect350 {

    /****
     *
     *
     * @param nums1
     * @param nums2
     * @return
     */
    public int[] intersect1(int[] nums1, int[] nums2) {
        return nums1;
    }

    public static void main(String[] args) {

    }
}
